using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Web.UI;
using HTB.Database;
using HTB.Database.Views;
using HTB.GeocodeService;
using HTB.v2.intranetx.permissions;
using HTB.v2.intranetx.progress;
using HTB.v2.intranetx.util;
using HTBUtilities;

namespace HTB.v2.intranetx.routeplanter.bingmaps.tabletApp
{
    public partial class BingRoutePlanerAutomaticTabletApp : Page
    {
        private static readonly log4net.ILog Log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
       
        private static string _startAddress = "";
        private string _taskID;
        private readonly PermissionsRoutePlanner _permissions = new PermissionsRoutePlanner();
        private int _userId;
        private string _routeName;
        private string _appointmentTimeStart;
        private string _appointmentTimeEnd;
        private string _zipRanges;
        private int _aktType;
        private double _latitude;
        private double _longitude;
        private bool _includeAbegegebeneAkten = false;

        protected void Page_Load(object sender, EventArgs e)
        {
            Server.ScriptTimeout = 3600 * 3; // hours
            
            _routeName = GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.ROAD_NAME]);
            _userId = GlobalUtilArea.GetZeroIfConvertToIntError(Request.Params[GlobalHtmlParams.INKASSANT_ID]);
            _appointmentTimeStart = GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.TIME_START]);
            _appointmentTimeEnd = GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.TIME_END]);
            _zipRanges = GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.ZIP_CODE_RANGE]);
            _aktType = GlobalUtilArea.GetZeroIfConvertToIntError(Request.Params[GlobalHtmlParams.AKT_TYPE_ID]);
            _latitude = GlobalUtilArea.GetZeroIfConvertToDoubleError(GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.LATITUDE]).Replace(".", ","));
            _longitude = GlobalUtilArea.GetZeroIfConvertToDoubleError(GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.LONGITUDE]).Replace(".", ","));
            _includeAbegegebeneAkten = HTBUtils.GetBoolValue(GlobalUtilArea.GetEmptyIfNull(Request.Params[GlobalHtmlParams.INCLUDE_ABGEGEBENE_AKTE]));

            if (ValidateEntry())
            {
                _taskID = _userId + ":BRPA";
                Context.Cache[_taskID] = new TaskStatus();

                SetUserInfo();
                DoCalculate();
                Response.Write("DONE!");
            }
        }

        private bool ValidateEntry()
        {
            bool ok = true;
            var sb = new StringBuilder();
            if (string.IsNullOrEmpty(_routeName))
            {
                ok = false;
                sb.Append("Sie müssen ein Routennamen eingeben!<BR/>");
            }
            if(_userId <= 0)
            {
                ok = false;
                sb.Append("Sie müssen ein Benutzername eingeben!<BR/>");
            }
            if(!ok)
                Response.Write(sb.ToString());
            return ok;
        }

        private void SetUserInfo()
        {
            if (_userId > 0)
            {
                var user = GetUser(_userId);
                if (user != null)
                {
                    _startAddress = user.UserStrasse + ", " + user.UserZIP + ", " + user.UserOrt + ", "+HTBUtils.GetCountryName(user.UserZIPPrefix);
                }
            }
        }

        private tblUser GetUser(int userId)
        {
            return (tblUser) HTBUtils.GetSqlSingleRecord("SELECT * FROM tblUser WHERE UserID = " + userId, typeof (tblUser));
        }

        public string DoCalculate()
        {
            RoutePlanerManagerAutomatic rpManager;

            if (GlobalUtilArea.GetEmptyIfNull(Request[GlobalHtmlParams.BingRouteRecalculate]) == GlobalHtmlParams.YES)
                rpManager = ReCalculateRoute();
            else
                rpManager = CalculateRoute();

//            string routeFilePath = RoutePlannerManager.GetRouteFilePath(rpManager.RouteUser, rpManager.RouteName);

//            FileSerializer<RoutePlannerManager>.Serialize(routeFilePath, rpManager);

            Session[GlobalHtmlParams.SessionCurrentPosition] = 0;
            Session[GlobalHtmlParams.SessionRoutePlannerManager] = rpManager;
            return "";
        }

        private RoutePlanerManagerAutomatic CalculateRoute()
        {
            var rpManager = new RoutePlanerManagerAutomatic(GlobalUtilArea.GetUserId(Session), (TaskStatus)Context.Cache[_taskID])
            {
                Source = GetType().Name,
                RouteName = _routeName,
                RouteUser = _userId
            };

            DateTime firstAppt = GlobalUtilArea.GetTodayAtTime(_appointmentTimeStart);
            DateTime backTime = GlobalUtilArea.GetTodayAtTime(_appointmentTimeEnd);
            long tripDuration = GetTripDuration(firstAppt, backTime);
            
            if (!HTBUtils.IsZero(_latitude) && !HTBUtils.IsZero(_longitude))
            {
                var location = new GeocodeLocation
                {
                    Latitude = _latitude,
                    Longitude = _longitude
                };
                _startAddress = "Standort";
                rpManager.currentLocation = new City(new AddressLocation(new AddressWithID(-1, _startAddress), new[] { location }), null);
            }

            ArrayList aktenList = HTBUtils.GetSqlRecords(GetSqlQueryBasedOnInput(), typeof(qryAktenInt));
            if (aktenList.Count == 0)
            {
                // Send error to ipad (errorcode -1)
                rpManager.UpdateProgressStatus(-1, "Keine Akte gefunden!");
            }
            else
            {
                LoadAddresses(rpManager, aktenList);
                if (HTBUtils.IsDateValid(firstAppt) && HTBUtils.IsDateValid(backTime))
                {
                    rpManager.RunAutomatic(_userId, firstAppt, tripDuration, _routeName);
                }
                else
                {
                    rpManager.Run();
                }
            }
            return rpManager;
        }

        private RoutePlanerManagerAutomatic ReCalculateRoute()
        {
            var rpManager = (RoutePlanerManagerAutomatic)Session[GlobalHtmlParams.SessionRoutePlannerManager];
            rpManager.Source = GetType().Name;
            rpManager.TskStatus = (TaskStatus) Context.Cache[_taskID];

            rpManager.RouteName = _routeName;
            rpManager.RouteUser = _userId;
            ReplaceAddresses(rpManager);
            rpManager.Run();
            return rpManager;
        }

        private void LoadAddresses(RoutePlanerManagerAutomatic rpManager, ArrayList akten)
        {
            if (!string.IsNullOrEmpty(_startAddress))
                rpManager.AddAddress(new AddressWithID(-1, _startAddress), false);

            foreach (qryAktenInt akt in akten)
            {
                var address = new StringBuilder(HTBUtils.ReplaceStringAfter(HTBUtils.ReplaceStringAfter(akt.GegnerLastStrasse, " top ", ""), "/", ""));
                address.Append(", ");
                address.Append(akt.GegnerLastZip);
                address.Append(" ");
                address.Append(akt.GegnerLastOrt);
                address.Append(", ");
                address.Append(HTBUtils.GetCountryName(akt.GegnerLastZipPrefix));
                rpManager.AddAddress(new AddressWithID(akt.AktIntID, address.ToString()));
            }
        }

        private void ReplaceAddresses(RoutePlanerManagerAutomatic rpManager)
        {
            var replacementList = (List<AddressWithID>) Session[GlobalHtmlParams.SessionReplacementAddresses];
            foreach (var addr in replacementList)
            {
                rpManager.ReplaceAddress(addr);
            }
        }

        private String GetSqlQueryBasedOnInput()
        {
//            string aktType = GlobalUtilArea.GetEmptyIfNull(ddlAktType.SelectedValue);
//            var sb = new StringBuilder("SELECT * FROM qryAktenInt WHERE AktIntStatus = 1 AND (");
            var sb = new StringBuilder("SELECT TOP 80 * FROM qryAktenInt WHERE ");

            sb.Append(_includeAbegegebeneAkten ? " AktIntStatus in (1, 2) " : " AktIntStatus = 1 ");

            if (_zipRanges.Length > 8)
            {
                sb.Append(" AND ( ");
                string[] ranges = _zipRanges.Split('~');
                int count = 0;
                foreach (string range in ranges)
                {
                    string[] zips = range.Split(';');
                    if (zips.Length == 2)
                    {
                        if (count > 0)
                            sb.Append(" OR  ");
                        sb.Append("(GegnerLastZip between '");
                        sb.Append(GlobalUtilArea.GetEmptyIfNull(zips[0]));
                        sb.Append("' AND '");
                        sb.Append(GlobalUtilArea.GetEmptyIfNull(zips[1]));
                        sb.Append("')");
                        count++;
                    }
                }
                sb.Append(")");
            }
            if (_aktType > 0)
            {
                sb.Append(" AND AktIntAktType = ");
                sb.Append(_aktType);
            }
            sb.Append(" AND AktIntSB = ");
            sb.Append(_userId);
            Log.Info(sb.ToString());
            return sb.ToString();
        }

        private long GetTripDuration(DateTime startTime, DateTime endTime)
        {
            TimeSpan ts = endTime.Subtract(startTime);
            return (long)ts.TotalSeconds;
        }

        #region Saved (Last) Route
        private List<RouteFileRecord> GetSavedRouteRecords()
        {
            string[] fileEntries = Directory.GetFiles(RoutePlanerManager.RouteFolder);
            return (from fileName in fileEntries
                    where fileName.EndsWith(RoutePlanerManager.RouteExtension) && fileName.Contains(RoutePlanerManagerAutomatic.DefaultRouteName)
                    select GetRouteFileRecord(fileName, Directory.GetCreationTime(fileName)) into rec
                    where rec != null
                    select rec).ToList();
        }
        private RouteFileRecord GetRouteFileRecord(string fileName, DateTime fileDate)
        {
            string[] tokens = fileName.Split('`');
            if (tokens.Length == 3)
            {
                var rec = new RouteFileRecord
                {
                    RouteUser = Convert.ToInt32(tokens[1]),
                    RouteName = tokens[2].Replace("." + RoutePlanerManager.RouteExtension, ""),
                    RouteDate = fileDate.ToShortDateString() + " " + fileDate.ToShortTimeString()
                };
                if (_permissions.GrantRoutePlannerForAll || (_permissions.GrantRoutePlannerForSelfOnly && rec.RouteUser == GlobalUtilArea.GetUserId(Session)))
                    return rec;

            }
            return null;
        }
        #endregion
    }
}
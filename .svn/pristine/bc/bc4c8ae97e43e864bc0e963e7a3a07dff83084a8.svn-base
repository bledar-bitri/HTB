using System;
using System.Collections;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;
using HTB.Database.LookupRecords;
using HTB.v2.intranetx.global_files;
using HTB.v2.intranetx.util;
using HTB.Database;
using HTBUtilities;
using System.Text;
using HTB.Database.Views;
using HTBInvoiceManager;
using System.Web;
using System.Web.UI.HtmlControls;

namespace HTB.v2.intranetx.customer
{
    public partial class CustomerNewAktInk : Page
    {
        private const string DdlPhoneTypePrefix = "txtPhoneType_";
        private const string TxtPhoneCountryPrefix = "txtPhoneCountry_";
        private const string TxtPhoneCityPrefix = "txtPhoneCity_";
        private const string TxtPhonePrefix = "txtPhone_";

        private tblUser _user;
        private tblControl _control = HTBUtils.GetControlRecord();
        private ArrayList _phoneTypes = new ArrayList();

        protected void Page_Init(object sender, EventArgs e)
        {
            // Registering the buttons control with RegisterPostBackControl early in the page lifecycle 
            // so that the FileUploadControl will upload files inside the UpdatePanel control
            ScriptManager1.RegisterPostBackControl(btnSubmit);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            //Session["MM_UserID"] = "545";
            _phoneTypes = HTBUtils.GetSqlRecords("SELECT PhoneTypeCode, PhoneTypeCaption FROM tblPhoneType ORDER BY PhoneTypeSequence", typeof(tblPhoneType));
            _user = HTBUtils.GetUser(GlobalUtilArea.GetUserId(Session));
            if (_user == null)
            {
                btnSubmit.Visible = false;
                return;
            }
            DrawPhoneTable();
            
            if (!IsPostBack)
            {
                LoadGegnerType();
                if (_user.UserIsSbAdmin)
                    LoadClientSbDdl(_user.UserKlient);
                else
                    trClientSB.Visible = false;
            }
        }
        private void LoadGegnerType()
        {
            ddlGegnerType.Items.Clear();
            ddlGegnerType.Items.Add(new ListItem("*** bitte auswählen ***", "-1"));
            ddlGegnerType.Items.Add(new ListItem("Firma", "0"));
            ddlGegnerType.Items.Add(new ListItem("Herr", "1"));
            ddlGegnerType.Items.Add(new ListItem("Frau", "2"));
        }

        #region Event Handlers
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            ctlMessage.Clear();
            try
            {
                if (ValidateEntry())
                {
                    tblGegner gegner = GetSavedGegner();
                    if (gegner == null)
                    {
                        ctlMessage.ShowError("Gegner konnte nicht gespeichert werden! Bitte kontaktieren Sie ECP");
                    }
                    else
                    {
                        tblCustInkAkt akt = GetEnteredAkt(true, gegner.GegnerID);
                        CreateInvoices(akt);
                        // lastly update akt so that it can be picked up by the system
                        akt.CustInkAktIsPartial = false;
                        RecordSet.Update(akt);
                        var msg = "Akt Gespeichert! [" + akt.CustInkAktID + "]";
                        if (!UploadFiles(akt))
                        {
                            msg += "<br/> <strong>***Aber nicht alle Dokumente wurden upgeloaded***</strong>";
                        }
                        ClearScreen();
                        ctlMessage.ShowSuccess(msg);
                    }
                }
            }
            catch (Exception ex)
            {
                ctlMessage.ShowException(ex);
            }
        }
        protected void btnCancel_Click(object sender, EventArgs e)
        {
            Response.Redirect("/v2/intranetx/customer/AktenInk.aspx");
        }
        protected void lnkAddPhone_Clicked(object sender, EventArgs e)
        {
            int existingRows = GetNumberOfPhones();
            AddRowToPhoneTable(existingRows);
            SetNumberOfPhones(existingRows + 1);
        }
        #endregion

        #region Create URLs
        
        private string GetSearchGegnerUrl()
        {
            var sb = new StringBuilder();
            sb.Append("../gegner/GegnerBrowser.aspx?" + GlobalHtmlParams.RETURN_TO_URL_ON_SUBMIT + "=" + GlobalHtmlParams.URL_NEW_AKT);
            AppendExtraParams(sb);
            return sb.ToString();
        }
        private string GetNewGegnerUrl()
        {
            var sb = new StringBuilder();
            sb.Append("../gegner/NewGegner.aspx?");
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.RETURN_TO_URL_ON_SUBMIT, GlobalHtmlParams.URL_NEW_AKT);
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.RETURN_TO_URL_ON_CANCEL, GlobalHtmlParams.URL_NEW_AKT);
            AppendExtraParams(sb);
            return sb.ToString();
        }

        private string GetCancelUrl(string urlCode)
        {
            switch (urlCode)
            {
                case GlobalHtmlParams.INKASSO_MAIN_SCREEN:
                    return "../../intranet/aktenink/AktenStaff.asp?" + Session["var"];
                default:
                    return "";
            }
        }

        private void AppendExtraParams(StringBuilder sb)
        {
            string extraParams = GetEntriesAsParams();
            if (extraParams.Length > 1)
            {
                sb.Append("&");
                sb.Append(GlobalHtmlParams.EXTRA_PARAMS);
                sb.Append("=");
                sb.Append(GlobalUtilArea.EncodeURL(extraParams.Substring(1)));
            }
        }
        #endregion

        private tblCustInkAkt GetEnteredAkt(bool save, int gegnerId)
        {
            var akt = new tblCustInkAkt
                          {
                              CustInkAktAuftraggeber = GlobalUtilArea.GetZeroIfConvertToIntError(41), // ecp
                              CustInkAktKlient = GlobalUtilArea.GetZeroIfConvertToIntError(_user.UserKlient),
                              CustInkAktGegner = gegnerId,
                              CustInkAktKunde = txtClientInvoiceNumber.Text,
                              CustInkAktEnterDate = DateTime.Now,
                              CustInkAktLastChange = DateTime.Now,
                              CustInkAktEnterUser = GlobalUtilArea.GetUserId(Session),
                              CustInkAktGothiaNr = txtClientReferenceNumber.Text,
                              CustInkAktInvoiceDate = GlobalUtilArea.GetDefaultDateIfConvertToDateError(txtClientInvoiceDate),
                              CustInkAktForderung = GlobalUtilArea.GetZeroIfConvertToDoubleError(txtForderung),
                              CustInkAktSB = GlobalUtilArea.GetZeroIfConvertToIntError(_control.DefaultSB),
                              CustInkAkKlientSB = _user.UserIsSbAdmin ? GlobalUtilArea.GetZeroIfConvertToIntError(ddlClientSB.SelectedValue) : _user.UserID,
                              CustInkAktNextWFLStep = DateTime.Now,
                              CustInkAktStatus = 1,
                              CustInkAktCurStatus = 1,
                              CustInkAktIsWflStopped = false,
                              CustInkAktIsPartial = true,
                              CustInkAktSendBericht = true,
                              CustInkAktMemo = txtMemo.Text
                          };
            akt.CustInkAktLastChangeUser = akt.CustInkAktEnterUser;

            var klient = (tblKlient)HTBUtils.GetSqlSingleRecord("SELECT * FROM tblKlient WHERE KlientId = " + akt.CustInkAktKlient, typeof(tblKlient));
            
            /* assign lawyer info from klient */
            
            akt.CustInkAktLawyerId = (klient == null ? _control.DefaultLawyerId : klient.KlientLawyerId);
            
            if (save)
            {
                RecordSet.Insert(akt);
                akt = (tblCustInkAkt)HTBUtils.GetSqlSingleRecord("SELECT TOP 1 * FROM tblCustInkAkt ORDER BY CustInkAktID DESC", typeof(tblCustInkAkt));
            }
            return akt;
        }

        private tblGegner GetSavedGegner()
        {

            tblGegner gegner = HTBUtils.GetGegner(txtName1.Text.Trim(), txtName2.Text.Trim(), txtStrasse.Text.Trim(), txtZIP.Text.Trim(), GlobalUtilArea.GetDefaultDateIfConvertToDateError(txtGebDat.Text))
                         ??
                         HTBUtils.CreateGegner(new tblGegner
                         {
                             GegnerAnrede = txtAnrede.Text.Trim(),
                             GegnerType = Convert.ToInt32(ddlGegnerType.SelectedValue),
                             GegnerName1 = txtName1.Text.Trim(),
                             GegnerName2 = txtName2.Text.Trim(),
                             GegnerName3 = txtName3.Text.Trim(),
                             GegnerStrasse = txtStrasse.Text.Trim(),
                             GegnerZipPrefix = txtZIPPrefix.Text.Trim(),
                             GegnerZip = txtZIP.Text.Trim(),
                             GegnerOrt = txtOrt.Text.Trim(),

                             GegnerLastStrasse = txtStrasse.Text.Trim(),
                             GegnerLastZipPrefix = txtZIPPrefix.Text.Trim(),
                             GegnerLastZip = txtZIP.Text.Trim(),
                             GegnerLastOrt = txtOrt.Text.Trim(),

                             GegnerGebDat = GlobalUtilArea.GetDefaultDateIfConvertToDateError(txtGebDat.Text),
                             GegnerCreateDate = DateTime.Now,
                             GegnerFaxCountry = txtFaxCountry.Text,
                             GegnerFaxCity = txtFaxCity.Text,
                             GegnerFax = txtFax.Text,
                             GegnerEmail = txtEmail.Text,
                             GegnerCreateSB = GlobalUtilArea.GetUserId(Session),
                             GegnerImported = 0,
                             GegnerVVZEnterDate = new DateTime(1900, 1, 1)
                         });
            if (gegner != null)
            {
                var set = new RecordSet();
                var lastPhoneCountry = "";
                var lastPhoneCity = "";
                var lastPhone = "";

                for (int i = GetNumberOfPhones() - 1; i >= 0; --i)
                {
                    var ddlPhoneType = (DropDownList)tblPhone.FindControl(DdlPhoneTypePrefix + i);
                    var txtPCountry = (TextBox)tblPhone.FindControl(TxtPhoneCountryPrefix + i);
                    var txtPCity = (TextBox)tblPhone.FindControl(TxtPhoneCityPrefix + i);
                    var txtP = (TextBox)tblPhone.FindControl(TxtPhonePrefix + i);

                    int phoneType = GlobalUtilArea.GetZeroIfConvertToIntError(ddlPhoneType.SelectedValue);
                    var phoneCountry = GlobalUtilArea.GetEmptyIfNull(txtPCountry.Text);
                    var phoneCity = GlobalUtilArea.GetEmptyIfNull(txtPCity.Text);
                    var phone = GlobalUtilArea.GetEmptyIfNull(txtP.Text);

                    if (phone.Trim().Length > 0)
                    {
                        set.InsertRecord(new tblGegnerPhone
                        {
                            GPhone = phone,
                            GPhoneCity = phoneCity,
                            GPhoneCountry = phoneCountry,
                            GPhoneDate = DateTime.Now,
                            GPhoneType = phoneType,
                            GPhoneGegnerID = gegner.GegnerID
                        });

                        lastPhoneCountry = phoneCountry;
                        lastPhoneCity = phoneCity;
                        lastPhone = phone;

                    }

                    if (lastPhone.Trim().Length > 0)
                    {
                        gegner.GegnerPhoneCountry = lastPhoneCountry;
                        gegner.GegnerPhoneCity = lastPhoneCity;
                        gegner.GegnerPhone = lastPhone;
                        set.UpdateRecord(gegner);
                    }
                }
            }
            return gegner;
        }

        private void LoadClientSbDdl(int klientId)
        {
            if (klientId > 0)
            {
                ArrayList klientSbList = HTBUtils.GetSqlRecords("SELECT UserId, UserVorname + ' ' + UserNachname [UserName] FROM tblUser WHERE UserKlient = " + klientId + " ORDER BY UserVorname", typeof(UserLookup));
                GlobalUtilArea.LoadDropdownList(ddlClientSB, klientSbList, "UserId", "UserName", false);
                GlobalUtilArea.SetSelectedValue(ddlClientSB, _user.UserID.ToString());
            }
        }
        
        private void CreateInvoices(tblCustInkAkt akt)
        {
            var invMgr = new InvoiceManager();
            invMgr.CreateAndSaveInvoice(akt.CustInkAktID, tblCustInkAktInvoice.INVOICE_TYPE_ORIGINAL, akt.CustInkAktForderung, "Kapital - Forderung", false);
            double clientCosts = GlobalUtilArea.GetZeroIfConvertToDoubleError(txtKosten);
            if (clientCosts > 0)
            {
                invMgr.CreateAndSaveInvoice(akt.CustInkAktID, tblCustInkAktInvoice.INVOICE_TYPE_CLIENT_COST, clientCosts, "Klient - Kosten", false);
            }
        }

        private bool ValidateEntry()
        {
            var sb = new StringBuilder();
            bool ok = true;
            if (GlobalUtilArea.GetZeroIfConvertToIntError(ddlGegnerType) < 0)
            {
                sb.Append("<strong><i>Bitte Schuldnertyp ausw&auml;hlen</i></strong>.<br/>");
                ok = false;
            }
            if (GlobalUtilArea.GetDefaultDateIfConvertToDateError(txtClientInvoiceDate).ToShortDateString() == HTBUtils.DefaultShortDate)
            {
                sb.Append("<strong><i>Rechnungsdatum</i></strong> falsch!<br/>");
                ok = false;
            }
            if (GlobalUtilArea.IsZero(GlobalUtilArea.GetZeroIfConvertToDoubleError(txtForderung)))
            {
                sb.Append("<strong><i>Forderung</i></strong> falsch!<br/>");
                ok = false;
            }

            if (!ok)
            {
                ctlMessage.AppendError(sb.ToString());
            }
            return ok;
        }

        private bool UploadFiles(tblCustInkAkt akt)
        {
            try
            {
                string folderPath = HTBUtils.GetConfigValue("DocumentsFolder");
                // Get the HttpFileCollection
                HttpFileCollection hfc = Request.Files;
                for (int i = 0; i < hfc.Count; i++)
                {
                    HttpPostedFile hpf = hfc[i];
                    if (hpf.ContentLength > 0)
                    {
                        string fileName = akt.CustInkAktID + "_" + Path.GetFileName(hpf.FileName);

                        hpf.SaveAs(folderPath + fileName);
                        RecordSet.Insert(new tblDokument
                        {
                            // CollectionInvoice
                            DokDokType = 25,
                            DokCaption = HTBUtils.GetJustFileName(hpf.FileName),
                            DokInkAkt = akt.CustInkAktID,
                            DokCreator = akt.CustInkAktSB,
                            DokAttachment = fileName,
                            DokCreationTimeStamp = DateTime.Now,
                            DokChangeDate = DateTime.Now
                        });
                        var doc = (tblDokument)HTBUtils.GetSqlSingleRecord("SELECT TOP 1 * FROM tblDokument ORDER BY DokID DESC", typeof(tblDokument));
                        if (doc != null)
                        {
                            RecordSet.Insert(new tblAktenDokumente { ADAkt = akt.CustInkAktID, ADDok = doc.DokID, ADAkttyp = 1 });
                        }
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        private string GetEntriesAsParams()
        {
            var sb = new StringBuilder();
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.CLIENT_INVOICE_NUMBER, txtClientInvoiceNumber.Text);
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.CLIENT_REFERENCE_NUMBER, txtClientReferenceNumber.Text);
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.MEMO, txtMemo.Text);
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.CLIENT_INVOICE_DATE, txtClientInvoiceDate.Text);
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.CLIENT_INVOICE_AMOUNT, txtForderung.Text);
            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.CLIENT_EXTRA_CHARGES, txtKosten.Text);

            GlobalUtilArea.AppendHtmlParamIfNotEmpty(sb, GlobalHtmlParams.RETURN_TO_URL_ON_CANCEL, GlobalUtilArea.GetEmptyIfNull(Request[GlobalHtmlParams.RETURN_TO_URL_ON_CANCEL]));
            
            return sb.ToString();
        }

        private void ClearScreen()
        {
            ddlGegnerType.SelectedIndex = 0;
            txtAnrede.Text = "";
            txtName1.Text = "";
            txtName2.Text = "";
            txtName3.Text = "";
            txtStrasse.Text = "";
            txtZIPPrefix.Text = "";
            txtZIP.Text = "";
            txtOrt.Text = "";
            txtFaxCountry.Text = "";
            txtFaxCity.Text = "";
            txtFax.Text = "";
            txtEmail.Text = "";
            txtGebDat.Text = "";
            txtClientInvoiceDate.Text = "";
            txtClientInvoiceNumber.Text = "";
            txtClientReferenceNumber.Text = "";
            txtForderung.Text = "";
            txtKosten.Text = "";
            txtMemo.Text = "";
            tblPhone.Controls.Clear();
            SetNumberOfPhones(1);
            DrawPhoneTable();
        }

        #region Gegner Phone Table
        private void DrawPhoneTable()
        {

            int existingRows = GetNumberOfPhones();

            if (existingRows == 0)
                existingRows = 1;

            for (int i = 0; i < existingRows; ++i)
            {
                AddRowToPhoneTable(i);
            }

            SetNumberOfPhones(existingRows);
        }

        private void AddRowToPhoneTable(int index)
        {
            string phoneType;
            string country;
            string city;
            string phone;

            var row = new HtmlTableRow();
            var cell1 = new HtmlTableCell();

            var ddlPhoneType = new DropDownList();
            var txtPhoneCountry = new TextBox();
            var txtPhoneCity = new TextBox();
            var txtPhone = new TextBox();

            txtPhoneCountry.Text = "43";

            phoneType = GlobalUtilArea.GetEmptyIfNull(Request.Form[DdlPhoneTypePrefix + index]);
            country = GlobalUtilArea.GetEmptyIfNull(Request.Form[TxtPhoneCountryPrefix + index]);
            city = GlobalUtilArea.GetEmptyIfNull(Request.Form[TxtPhoneCityPrefix + index]);
            phone = GlobalUtilArea.GetEmptyIfNull(Request.Form[TxtPhonePrefix + index]);


            GlobalUtilArea.LoadDropdownList(ddlPhoneType, _phoneTypes, "PhoneTypeCode", "PhoneTypeCaption", false);

            cell1.Controls.Add(ddlPhoneType);
            cell1.Controls.Add(new LiteralControl("&nbsp;&nbsp;+"));
            cell1.Controls.Add(txtPhoneCountry);
            cell1.Controls.Add(new LiteralControl("("));
            cell1.Controls.Add(txtPhoneCity);
            cell1.Controls.Add(new LiteralControl(")"));
            cell1.Controls.Add(txtPhone);

            ddlPhoneType.ID = DdlPhoneTypePrefix + index;
            txtPhoneCountry.CssClass = "docText";

            txtPhoneCountry.ID = TxtPhoneCountryPrefix + index;
            txtPhoneCountry.CssClass = "docText";
            txtPhoneCountry.Attributes.Add("onfocus", "this.style.backgroundColor='#DFF4FF'");
            txtPhoneCountry.Attributes.Add("onblur", "this.style.backgroundColor=''");
            txtPhoneCountry.Attributes.Add("size", "4'");
            txtPhoneCountry.MaxLength = 5;

            txtPhoneCity.ID = TxtPhoneCityPrefix + index;
            txtPhoneCity.CssClass = "docText";
            txtPhoneCity.Attributes.Add("onfocus", "this.style.backgroundColor='#DFF4FF';");
            txtPhoneCity.Attributes.Add("onblur", "this.style.backgroundColor=''");
            txtPhoneCity.Attributes.Add("size", "6'");
            txtPhoneCity.MaxLength = 10;

            txtPhone.ID = TxtPhonePrefix + index;
            txtPhone.CssClass = "docText";
            txtPhone.Attributes.Add("onfocus", "this.style.backgroundColor='#DFF4FF';");
            txtPhone.Attributes.Add("onblur", "this.style.backgroundColor=''");
            txtPhone.Attributes.Add("size", "15'");
            txtPhone.MaxLength = 45;

            row.Cells.Add(cell1);

            if (index == 0)
            {
                var cell5 = new HtmlTableCell();
                var lnk = new LinkButton
                {
                    ID = "lnkAddPhone" + index,
                    Text = "<strong>+</strong>"
                };
                lnk.Click += lnkAddPhone_Clicked;
                cell5.Controls.Add(lnk);
                row.Cells.Add(cell5);
                ScriptManager1.RegisterPostBackControl(lnk);
            }

            tblPhone.Rows.Add(row);
        }

        private int GetNumberOfPhones()
        {
            try
            {
                return Convert.ToInt32(hdnNumberOfPhones.Value);
            }
            catch
            {
                return 0;
            }
        }

        private void SetNumberOfPhones(int val)
        {
            hdnNumberOfPhones.Value = val.ToString();
        }
        
        #endregion

    }
}